name: Check missing JSON numbers

on:
  workflow_dispatch: {}   # lets you click 'Run workflow' in Actions tab
  push:
    paths:
      - "json/**.json"    # optional: run on JSON changes

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Run check
        run: |
          python - <<'PY'
import glob, os, re, sys, pathlib

DIR = "json"
MAX_N = 1950
rx = re.compile(r"_(\d+)\.json$", re.IGNORECASE)

found = set()
for p in glob.iglob(os.path.join(DIR, "**", "*.json"), recursive=True):
    m = rx.search(os.path.basename(p))
    if m:
        try:
            found.add(int(m.group(1)))
        except ValueError:
            pass

expected = set(range(1, MAX_N+1))
missing = sorted(expected - found)

def compress_ranges(nums):
    if not nums: return []
    out, s, prev = [], nums[0], nums[0]
    for x in nums[1:]:
        if x == prev + 1: prev = x
        else:
            out.append(f"{s}-{prev}" if s!=prev else f"{s}")
            s = prev = x
    out.append(f"{s}-{prev}" if s!=prev else f"{s}")
    return out

summary_lines = []
summary_lines.append(f"**Directory:** {DIR}")
summary_lines.append(f"**Expected:** 1..{MAX_N}  (total {MAX_N})")
summary_lines.append(f"**Found:** {len(found)}")
summary_lines.append(f"**Missing:** {len(missing)}")
if missing:
    summary_lines.append("")
    summary_lines.append("**Missing (compressed ranges):**")
    summary_lines.append(", ".join(compress_ranges(missing)))
    summary_lines.append("")
    summary_lines.append("<details><summary>Missing (full list)</summary>")
    summary_lines.append("")
    summary_lines.append(", ".join(map(str, missing)))
    summary_lines.append("")
    summary_lines.append("</details>")

# Write to the GitHub job summary
with open(os.environ.get("GITHUB_STEP_SUMMARY","/tmp/summary.md"), "a", encoding="utf-8") as f:
    f.write("\n".join(summary_lines) + "\n")

# Also write a plain artifact file
pathlib.Path("missing_numbers.txt").write_text(
    "\n".join(map(str, missing)) + ("\n" if missing else ""),
    encoding="utf-8"
)

# Exit non-zero if any are missing (so the job shows as failed)
sys.exit(1 if missing else 0)
PY

      - name: Upload missing list (if any)
        if: always()   # upload even if the step failed due to missing
        uses: actions/upload-artifact@v4
        with:
          name: missing-numbers
          path: missing_numbers.txt
          if-no-files-found: ignore
