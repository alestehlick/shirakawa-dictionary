name: Count and list missing json files

on:
  push:
    branches: [ main, master ]
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  count:
    runs-on: ubuntu-latest
    env:
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
      # >>>>>>>>> EDIT THIS to your real folder path <<<<<<<<<
      TARGET_DIR: json
      EXPECTED_TOTAL: "1950"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate target folder
        shell: bash
        run: |
          set -euo pipefail
          if [[ ! -d "$TARGET_DIR" ]]; then
            echo "::error ::Folder '$TARGET_DIR' does not exist at repo root. Edit TARGET_DIR in the workflow to the correct path (exact case)."
            echo "Here are candidate folders containing '*_[0-9]*.json':"
            find . -type f -iname '*_[0-9]*.json' -printf '%h\n' | sed 's#^\./##' | sort | uniq -c | sort -nr | head -n 20 || true
            exit 1
          fi

      - name: Count JSONs and list missing (strict; no folder creation)
        shell: bash
        run: |
          set -euo pipefail
          FOLDER="$TARGET_DIR"
          COUNT_FILE="$FOLDER/_file_count.txt"
          MISSING_TXT="$FOLDER/_missing_numbers.txt"
          MISSING_JSON="$FOLDER/_missing_numbers.json"

          # Collect numbers from files matching <kanji>_<number>.json
          NUMS=()
          while IFS= read -r -d '' f; do
            base="$(basename "$f")"
            # ignore our own outputs if they already exist
            case "$base" in
              _file_count.txt|_missing_numbers.txt|_missing_numbers.json) continue ;;
            esac
            # take digits after the last underscore, before .json
            stem="${base%.json}"
            num="${stem##*_}"
            if [[ "$num" =~ ^[0-9]+$ ]]; then
              NUMS+=("$num")
            fi
          done < <(find "$FOLDER" -type f -iname '*.json' -print0)

          # Unique, numeric sort
          FOUND_NUMS=()
          if ((${#NUMS[@]})); then
            mapfile -t FOUND_NUMS < <(printf '%s\n' "${NUMS[@]}" | sort -n | uniq)
          fi

          # Write how many numbered jsons found
          printf '%s\n' "${#FOUND_NUMS[@]}" > "$COUNT_FILE"

          # Build expected and compute missing in 1..EXPECTED_TOTAL
          tmp_expected="$(mktemp)"; seq 1 "$EXPECTED_TOTAL" > "$tmp_expected"
          tmp_found="$(mktemp)";    printf '%s\n' "${FOUND_NUMS[@]:-}" > "$tmp_found"

          if [[ -s "$tmp_found" ]]; then
            mapfile -t MISSING < <(comm -23 "$tmp_expected" "$tmp_found")
          else
            mapfile -t MISSING < <(cat "$tmp_expected")
          fi

          # Write outputs
          if ((${#MISSING[@]})); then
            printf '%s\n' "${MISSING[@]}" > "$MISSING_TXT"
          else
            : > "$MISSING_TXT"
          fi

          {
            echo "{"
            echo "  \"folder\": \"${FOLDER}\","
            echo "  \"pattern\": \"<kanji>_<NUMBER>.json (number after last underscore)\","
            echo "  \"expected_total\": ${EXPECTED_TOTAL},"
            echo "  \"found_total\": ${#FOUND_NUMS[@]},"
            echo "  \"missing_count\": ${#MISSING[@]},"
            echo -n "  \"missing_numbers\": ["
            if ((${#MISSING[@]})); then
              printf '%s,' "${MISSING[@]}" | sed 's/,$//'
            fi
            echo "]"
            echo "}"
          } > "$MISSING_JSON"

          rm -f "$tmp_expected" "$tmp_found"

      - name: Commit results (skip CI)
        shell: bash
        run: |
          set -euo pipefail
          OUT1="$TARGET_DIR/_file_count.txt"
          OUT2="$TARGET_DIR/_missing_numbers.txt"
          OUT3="$TARGET_DIR/_missing_numbers.json"

          # If any of these are ignored, add an exception
          for p in "$OUT1" "$OUT2" "$OUT3"; do
            if git check-ignore -q "$p"; then
              echo "!$p" >> .gitignore
              git add .gitignore
            fi
          done

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -f "$OUT1" "$OUT2" "$OUT3" || true
          if ! git diff --cached --quiet; then
            git commit -m "chore: update count & missing list [skip ci]"
            git push
          else
            echo "No changes to commit."
          fi
