name: Count and list missing json files

on:
  push:
    branches: [ main, master ]
    paths:
      - 'json/**'
      - '.github/workflows/count-files.yml'
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  count:
    runs-on: ubuntu-latest
    env:
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Count JSONs and write reports (robust; no broken pipes)
        shell: bash
        run: |
          set -euo pipefail

          FOLDER="json"
          COUNT_FILE="$FOLDER/_file_count.txt"
          MISSING_TXT="$FOLDER/_missing_numbers.txt"
          MISSING_JSON="$FOLDER/_missing_numbers.json"
          DEBUG_LIST="$FOLDER/_debug_listing.txt"
          EXPECTED_TOTAL=1950

          mkdir -p "$FOLDER"

          # Collect basenames of *.json (null-delimited to be safe), skip our helper files explicitly
          FILES=()
          while IFS= read -r -d '' f; do
            base="$(basename "$f")"
            case "$base" in
              _file_count.txt|_missing_numbers.txt|_missing_numbers.json|_debug_listing.txt) continue ;;
            esac
            FILES+=("$base")
          done < <(find "$FOLDER" -type f -iname '*.json' -print0)

          # Debug sample (no pipes -> no SIGPIPE)
          {
            echo "== SAMPLE FILENAMES (up to 50) =="
            n=0
            for b in "${FILES[@]}"; do
              echo "$b"
              n=$((n+1))
              (( n>=50 )) && break
            done
            echo
          } > "$DEBUG_LIST"

          # Extract digits after the LAST underscore before .json
          NUMS=()
          : > "$DEBUG_LIST"  # reset; now record parsed mapping
          echo "== PARSE CHECK (filename -> number) ==" >> "$DEBUG_LIST"
          for base in "${FILES[@]}"; do
            stem="${base%.json}"
            # take text after last underscore
            num="${stem##*_}"
            if [[ "$num" =~ ^[0-9]+$ ]]; then
              NUMS+=("$num")
              echo "$base -> $num" >> "$DEBUG_LIST"
            else
              echo "$base -> (no match)" >> "$DEBUG_LIST"
            fi
          done

          # Unique, numeric sort
          FOUND_NUMS=()
          if ((${#NUMS[@]})); then
            mapfile -t FOUND_NUMS < <(printf '%s\n' "${NUMS[@]}" | sort -n | uniq)
          fi

          FOUND_TOTAL="${#FOUND_NUMS[@]}"
          printf '%s\n' "$FOUND_TOTAL" > "$COUNT_FILE"

          # Build expected 1..EXPECTED_TOTAL and compute missing
          tmp_expected="$(mktemp)"; seq 1 "$EXPECTED_TOTAL" > "$tmp_expected"
          tmp_found="$(mktemp)";    printf '%s\n' "${FOUND_NUMS[@]:-}" > "$tmp_found"

          # comm needs sorted unique inputs (we ensured that)
          MISSING=()
          if [[ -s "$tmp_found" ]]; then
            mapfile -t MISSING < <(comm -23 "$tmp_expected" "$tmp_found")
          else
            mapfile -t MISSING < <(cat "$tmp_expected")
          fi

          # Write newline-separated missing numbers
          if ((${#MISSING[@]})); then
            printf '%s\n' "${MISSING[@]}" > "$MISSING_TXT"
          else
            : > "$MISSING_TXT"
          fi

          # JSON summary
          {
            echo "{"
            echo "  \"folder\": \"${FOLDER}\","
            echo "  \"pattern\": \"<kanji>_<NUMBER>.json  // number taken after last underscore\","
            echo "  \"expected_total\": ${EXPECTED_TOTAL},"
            echo "  \"found_total\": ${FOUND_TOTAL},"
            echo "  \"missing_count\": ${#MISSING[@]},"
            echo -n "  \"missing_numbers\": ["
            if ((${#MISSING[@]})); then
              # join with commas without trailing comma
              printf '%s,' "${MISSING[@]}" | sed 's/,$//'
            fi
            echo "]"
            echo "}"
          } > "$MISSING_JSON"

          rm -f "$tmp_expected" "$tmp_found"

      - name: Commit results (skip CI)
        shell: bash
        run: |
          set -euo pipefail
          for p in json/_file_count.txt json/_missing_numbers.txt json/_missing_numbers.json json/_debug_listing.txt; do
            if git check-ignore -q "$p"; then
              echo "!$p" >> .gitignore
              git add .gitignore
            fi
          done

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -f json/_file_count.txt json/_missing_numbers.txt json/_missing_numbers.json json/_debug_listing.txt
          if ! git diff --cached --quiet; then
            git commit -m "chore: update json count & missing list [skip ci]"
            git push
          else
            echo "No changes to commit."
          fi
