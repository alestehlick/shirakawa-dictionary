name: Count and list missing json files

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'json/**'
      - '.github/workflows/count-files.yml'
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  count:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Count JSONs and write reports (pure Bash; last-underscore rule)
        shell: bash
        run: |
          set -euo pipefail
          FOLDER="json"
          COUNT_FILE="json/_file_count.txt"
          MISSING_TXT="json/_missing_numbers.txt"
          MISSING_JSON="json/_missing_numbers.json"
          EXPECTED_TOTAL=1950

          mkdir -p "$FOLDER"

          # Collect numbers from filenames:
          # - Matches: "<kanji>_<number>.json"  (extract the number after the LAST underscore)
          # - Also accepts: "<number>.json"
          declare -a NUMS=()

          while IFS= read -r -d '' path; do
            base="$(basename "$path")"
            if [[ "$base" == *.json ]]; then
              # strip extension
              stem="${base%.json}"
              # take text after last underscore if present; otherwise the whole stem
              if [[ "$stem" == *_* ]]; then
                num="${stem##*_}"
              else
                num="$stem"
              fi
              # accept only pure integers
              if [[ "$num" =~ ^[0-9]+$ ]]; then
                NUMS+=("$num")
              fi
            fi
          done < <(find "$FOLDER" -type f -iname '*.json' -print0)

          # Sort unique
          mapfile -t FOUND_NUMS < <(printf '%s\n' "${NUMS[@]}" | sort -n | uniq)

          # Count found (this is "how many numbered .jsons we found")
          FOUND_TOTAL="${#FOUND_NUMS[@]}"
          printf '%s\n' "$FOUND_TOTAL" > "$COUNT_FILE"

          # Build expected 1..EXPECTED_TOTAL
          tmp_expected="$(mktemp)"
          seq 1 "$EXPECTED_TOTAL" > "$tmp_expected"

          # Write found numbers to a temp file
          tmp_found="$(mktemp)"
          printf '%s\n' "${FOUND_NUMS[@]}" > "$tmp_found"

          # Missing = expected minus found
          mapfile -t MISSING < <(comm -23 "$tmp_expected" "$tmp_found")

          # Write newline-separated missing numbers
          if ((${#MISSING[@]})); then
            printf '%s\n' "${MISSING[@]}" > "$MISSING_TXT"
          else
            : > "$MISSING_TXT"
          fi

          # JSON summary (compact but readable)
          MISSING_COUNT="${#MISSING[@]}"
          {
            echo "{"
            echo "  \"folder\": \"${FOLDER}\","
            echo "  \"pattern\": \"(<kanji>_|)<NUMBER>.json  // number taken after last underscore\","
            echo "  \"expected_total\": ${EXPECTED_TOTAL},"
            echo "  \"found_total\": ${FOUND_TOTAL},"
            echo "  \"missing_count\": ${MISSING_COUNT},"
            echo -n "  \"missing_numbers\": ["
            if ((${#MISSING[@]})); then
              # join with commas without trailing comma
              paste -sd, <(printf '%s\n' "${MISSING[@]}")
            fi
            echo "]"
            echo "}"
          } > "$MISSING_JSON"

          rm -f "$tmp_expected" "$tmp_found"

      - name: Commit results (skip CI)
        shell: bash
        run: |
          set -euo pipefail

          # Ensure outputs are not ignored
          for p in json/_file_count.txt json/_missing_numbers.txt json/_missing_numbers.json; do
            if git check-ignore -q "$p"; then
              echo "!$p" >> .gitignore
              git add .gitignore
            fi
          done

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -f json/_file_count.txt json/_missing_numbers.txt json/_missing_numbers.json
          if ! git diff --cached --quiet; then
            git commit -m "chore: update json count & missing list [skip ci]"
            git push
          else
            echo "No changes to commit."
          fi
